{"version":3,"sources":["components/FormNewNote.js","components/ItemNote.js","components/Notes.js","App.js","index.js"],"names":["FormNewNote","props","useState","text","form","setForm","name","onChange","evt","target","value","prevForm","className","onClick","preventDefault","newNote","onFormSubmit","ItemNote","note","id","onDelete","Notes","handleDelete","fetch","URL","method","then","getNotes","handleSbmit","headers","body","JSON","stringify","response","json","result","setState","notes","state","this","map","item","key","Component","App","ReactDOM","render","document","getElementById"],"mappings":"+RAGe,SAASA,EAAYC,GAAQ,IAAD,EACjBC,mBAAS,CAC/BC,KAAM,KAFiC,mBAClCC,EADkC,KAC5BC,EAD4B,KAyBzC,OACE,8BACE,2CACA,8BAAUC,KAAK,OAAOC,SAvBL,SAACC,GAAS,IAAD,EACJA,EAAIC,OAApBH,EADoB,EACpBA,KAAMI,EADc,EACdA,MACdL,GAAQ,SAACM,GAAD,sBAAoBA,EAApB,eAA+BL,EAAOI,QAqBEA,MAAON,EAAKD,OAC1D,yBAAKS,UAAU,sBAAsBC,QAnBpB,SAACL,GAGpB,GAFAA,EAAIM,iBAEc,KAAdV,EAAKD,KAAa,CACpB,IAAMY,EAAU,CACdZ,KAAMC,EAAKD,MAGbF,EAAMe,aAAaD,GACnBV,EAAQ,CACNF,KAAM,QASR,YC7BS,SAASc,EAAShB,GAAQ,IAC/BiB,EAASjB,EAATiB,KAMR,OACE,yBAAKN,UAAU,mBACb,2BAAIM,EAAKf,MACT,yBAAKS,UAAU,wBAAwBC,QAAU,WAPhC,IAACM,IAOoDD,EAAKC,GAN7ElB,EAAMmB,SAASD,KAMb,U,ICTeE,E,kDACnB,WAAYpB,GAAQ,IAAD,8BACjB,cAAMA,IAqBRqB,aAAe,SAACH,GACdI,MAAM,GAAD,OAAI,EAAKC,IAAT,YAAgBL,GAAM,CACzBM,OAAQ,WAEPC,MAAK,kBAAM,EAAKC,eA1BF,EA6BnBC,YAAc,SAACb,GACbQ,MAAM,EAAKC,IAAK,CACdC,OAAQ,OACRI,QAAS,CACP,eAAgB,kCAElBC,KAAMC,KAAKC,UAAUjB,KAEpBW,MAAK,kBAAM,EAAKC,eArCF,EAwCnBA,SAAW,WACTJ,MAAM,EAAKC,KACRE,MAAK,SAACO,GAAD,OAAcA,EAASC,UAC5BR,MAAK,SAACS,GACL,EAAKC,SAAS,CAAEC,MAAOF,QA1C3B,EAAKG,MAAQ,CACXD,MAAO,IAET,EAAKb,IAAM,0CALM,E,qDAQT,IAAD,OACP,OACE,oCACE,qCAAU,0BAAMZ,UAAU,yBAAyBC,QAAS0B,KAAKZ,YAAvD,YACV,yBAAKf,UAAU,cACZ2B,KAAKD,MAAMD,MAAMG,KAAI,SAACC,GAAD,OACpB,kBAACxB,EAAD,CAAUyB,IAAKD,EAAKtB,GAAID,KAAMuB,EAAMrB,SAAU,EAAKE,mBAGvD,kBAACtB,EAAD,CAAagB,aAAcuB,KAAKX,iB,0CAgCpCW,KAAKZ,e,GAlD0BgB,aCQpBC,MARf,WACE,OACE,yBAAKhC,UAAU,aACb,kBAAC,EAAD,QCFNiC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.e3966760.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function FormNewNote(props) {\n  const [form, setForm] = useState({\n    text: '',\n  });\n\n  const handleChange = (evt) => {\n    const { name, value } = evt.target;\n    setForm((prevForm) => ({ ...prevForm, [name]: value }));\n  };\n\n  const handleSubmit = (evt) => {\n    evt.preventDefault();\n\n    if (form.text !== '') {\n      const newNote = {\n        text: form.text,\n      };\n\n      props.onFormSubmit(newNote);\n      setForm({\n        text: '',\n      });\n    }\n  };\n\n  return (\n    <form>\n      <label>New Note</label>\n      <textarea name='text' onChange={handleChange} value={form.text} />\n      <div className=\"material-icons send\" onClick={handleSubmit}>near_me</div>\n    </form>\n  );\n}\n\nFormNewNote.propTypes = {\n  onFormSubmit: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function ItemNote(props) {\n  const { note } = props;\n\n  const handleDelete = (id) => {\n    props.onDelete(id);\n  };\n\n  return (\n    <div className='block-item-note'>\n      <p>{note.text}</p>\n      <div className='material-icons delete' onClick={ () => { handleDelete(note.id); } }>clear</div>\n    </div>\n  );\n}\n\nItemNote.propTypes = {\n  note: PropTypes.object.isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport FormNewNote from './FormNewNote';\nimport ItemNote from './ItemNote';\n\nexport default class Notes extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      notes: [],\n    };\n    this.URL = 'https://ra-6-2-serv.herokuapp.com/notes';\n  }\n\n  render() {\n    return (\n      <>\n        <h2>Notes <span className='material-icons refresh' onClick={this.getNotes()}>refresh</span></h2>\n        <div className='list-notes'>\n          {this.state.notes.map((item) => (\n            <ItemNote key={item.id} note={item} onDelete={this.handleDelete} />\n          ))}\n        </div>\n        <FormNewNote onFormSubmit={this.handleSbmit} />\n      </>\n    );\n  }\n\n  handleDelete = (id) => {\n    fetch(`${this.URL}/${id}`, {\n      method: 'DELETE',\n    })\n      .then(() => this.getNotes());\n  }\n\n  handleSbmit = (newNote) => {\n    fetch(this.URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json;charset=utf-8',\n      },\n      body: JSON.stringify(newNote),\n    })\n      .then(() => this.getNotes());\n  }\n\n  getNotes = () => {\n    fetch(this.URL)\n      .then((response) => response.json())\n      .then((result) => {\n        this.setState({ notes: result });\n      });\n  }\n\n  componentDidMount() {\n    this.getNotes();\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport Notes from './components/Notes';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <Notes />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}